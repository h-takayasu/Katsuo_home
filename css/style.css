/*文字コードの設定*/
@charset "UTF-8";
@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
@import url('http://fonts.googleapis.com/earlyaccess/mplus1p.css');
@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans&display=swap');

*, *::before, *::after {
    box-sizing: border-box;
}

/*フォントを設定*/
/* スクロール禁止時間を設定 */
body {
    font-family: 'Roboto', 'M PLUS 1p', sans-serif;
    /* animation: DisableScroll .1s linear 2.8s both; */
}

/*図形について*/
*, *::before, *::after {
    box-sizing: border-box;
}

/*
.headerbackground {
    background: linear-gradient(#333 0%,#333 50%,rgb(243, 243, 243) 50%,rgb(243, 243, 243) 100%);
    display: flex;
    height: 100vh;
    width: 100%;
}
*/

/* 全体の背景の設定　色を指定 */
.background {
    display: block;
    background: #f9fcfd;
}

/* ヘッダーの詳細を記述 */
.header_top {
    /* 背景色を指定 */
    background: #5c97b7;
    /* 高さをデバイスの表示枠の55%に指定(本来％は親要素の割合を示す) */
    height: 70%;
    width: 100%;
    /* 絶対配置ができるように設定 しかしここに記述する意味は分からない */
    display: block;
    /* 要素が重なっているときのレイヤを指定する 数字が大きいほど手前に表示される */
    /* z-index: 1; */
}

/* ヘッダーの中に配置した画像に対して詳細を記述 */
/* div内の画像を中央ぞろえするために子要素 aに対して中央ぞろえのcssを記述 */
.innerimage {
    width: 100%;
    height: auto;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

/* div内の画像を中央ぞろえするために子要素 aに対して中央ぞろえのcssを記述 */
.innerimage a {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.innerimage img {
    width: 70%;
}

/* サイトヘッダー以降のメインコンテンツ */
.site-contents {
    background: #f9fcfd;
    width: 100%;
    height: auto;
    display: block;
}

/* 大見出しh2のcss */
h2 {
    font-size: 4vw;
    font-weight: bold;
    color: #333;
    text-align: center;
    margin-top: 3%;
    margin-bottom: 3%;
    padding: 0;
    letter-spacing: 0.5em; /*文字の間隔 em=文字の高さという単位だと相対的な比率が使用可能*/
}

/* h2 .easing {
  display: flex;
  overflow: hidden;
  font-family: 'Josefin Sans', sans-serif;
}

.easing span {
    transform: translate(0, 105%);
    transition: transform cubic-bezier(0.215, 0.61, 0.355, 1) 0.5s;
}

.easing.-visible span {
    transform: translate(0, 0);
} */
/* イージングテキストを実装するためにテキストを移動させて、overflow: hiddenで文字を隠す */
.easing {
    position: relative;
    overflow: hidden;
}

.easing span {
    display: inline-block;
    transform: translate(0, 105%);
    transition: transform cubic-bezier(0.215, 0.61, 0.355, 1) 0.5s;
}

.easing.-visible span {
    transform: translate(0, 0);
}

.under-easing {
    opacity: 0;
    /* transform: translate(0, 105%); */
    transition: all 1s;
}

.under-easing.-visible {
    opacity: 1;
    transform: translate(0, 0);
}

h3 {
    font-size: 2vw;
    font-weight: bold;
    color: #333;
    text-align: left;
    margin-top: 3%;
    margin-left: 3%;
    padding: 0;
}

h4 {
    font-size: 1.5vw;
    color: #333;
    text-align: left;
    margin-top: 1%;
    margin-left: 3%;
    line-height: 2em
}

/* h4タグの中の文字にアンダーラインを引く */
h4 span {
    position: relative;
    background: linear-gradient(transparent 40%, yellow 40%);
}



/* 要素を横並びに */
.contentsimages {
    display: flex;
}
/* 画像の大きさをdiv単位で指定する divで大きさを指定するためにクラス内のimgタグについて記述する必要があった */
.contents_video {
    display: flex;
    width: 30vw;
    height: auto;
    margin-left: 10%;
    margin-top: 3%;
}

.contents_video img {
    width: 100%;
    height: 100%;
}

.membersimages {
    display: flex;
    width: 100%;
    height: auto;
}

/* 箇条書きに使うタグulの黒丸を消す */
ul {
    list-style: none;   /* 箇条書きに使うタグulの黒丸を消す */
    width: 100%;
    display: flex;      /* flexを使うと横並びになる */
}

/* メンバーズに表示する画像 */
.mens img {
    display: flex;
    width: 30vw;
    height: auto;
    /* margin-left: 10%; */
    filter: drop-shadow(0 0 1vw rgb(136, 136, 136)); /* drop-shadowは実際の画像に対して影をつける */
}
/* li {
    width: 100%;
} */

/* 表示される画像の幅が小さいとき(スマホなど)は縦に並べる */
/* このような仕様をメディアクエリという */
@media screen and (max-width: 768px) {
    /* 画像を縦並びにする */
    ul {
        display: block;
    }
    /* 縦並びに↓画像を画面中央ぞろえにする */
    li {
        display: block;
        text-align: center;
    }
    /* block内のテキストを中央ぞろえするにはtext-align：center */
    /* 画像を中央ぞろえにするには対象のimgに対してmargin 0px autoにすればよいらしい */
    li img {
        margin: 0px auto;
    }
    .mens img {
        width: 70vw;
    }
}


figure.hover-parent {
    width: 100%;
    height: auto;
    position: relative;
    overflow: hidden;
    }

figcaption.hover-mask {
    width: 100%;
    height: 100%;
    position: absolute;
    background: #f9fcfd;
    opacity: 0;
    transition:all 0.6s ease;
    top: 0;
    color: rgb(29, 29, 29);
    display: flex;    /* text_alignはBlock要素にしか効かない */
    /* display flexの時にテキストを上下中央にそろえる */
    justify-content: center;
    align-items: center;
    /* text-align: center;     文字を中央に配置 */
    /* padding: 30px; */
    z-index: 2;
    font-size: 2vw;
    }
figure.hover-parent:hover .hover-mask {
    opacity: 0.7;
    transition:all 0.6s ease;
    }
/* # 画像の下に配置する名前のテキスト */
.mens p {
    text-align: center; /* テキストを中央に配置 */
    margin-top: 2vw;
    font-size: 2vw;
}


.marginspace {
    display: block;
    background: #f9fcfd;
    height: 5vw;
}


/* li {
    margin-right: 25px;
} */
/* aタグで色を設定するとリンクによる強制デコレーションでのカラー変更を無視することができる */
/* text-decorationで下線部を消す */
/* a {
    color: #fff;
    text-decoration: none;
} */



/*画面後半*/
#bottombackgroud {
    background: rgb(235, 238, 231) ;
    position: relative;
    height: 100vh;
    width: 100%;
}












/*========= 途中からハンバーガーメニューに変化するのためのCSS ===============*/

/*========= ボタンのためのCSS ===============*/

/*ボタン全体の形状*/
.openbtn{
    /*はじめは非表示に*/
	display: none;
    /*ボタンの位置*/
	position:fixed;
	top:10px;
	right: 10px;
	z-index: 999;
    /*ボタンの形状*/
	background:#666;
	cursor: pointer;
    width: 50px;
    height:50px;
	border-radius: 5px;
}

/*ボタンのアイコン設定*/
.openbtn span{
    display: inline-block;
    transition: all .4s;
    position: absolute;
    left: 14px;
    height: 3px;
    border-radius: 2px;
	background-color: #fff;
  	width: 45%;
  }

.openbtn span:nth-of-type(1) {
	top:15px;
}

.openbtn span:nth-of-type(2) {
	top:23px;
}

.openbtn span:nth-of-type(3) {
	top:31px;
}

/*activeクラスが付与された後のボタンのアイコン設定*/
.openbtn.active span:nth-of-type(1) {
    top: 18px;
    left: 18px;
    transform: translateY(6px) rotate(-45deg);
    width: 30%;
}

.openbtn.active span:nth-of-type(2) {
	opacity: 0;
}

.openbtn.active span:nth-of-type(3){
    top: 30px;
    left: 18px;
    transform: translateY(-6px) rotate(45deg);
    width: 30%;
}

/*fadeDownクラスが付与された後のボタンの出現アニメーション設定*/
.fadeDown {
    animation-name: fadeDownAnime;
    animation-duration: 0.5s;
    animation-fill-mode: forwards;
    opacity: 0;
    display: block;
}
@keyframes fadeDownAnime{
  from {
    opacity: 0;
	transform: translateY(-100px);
  }

  to {
    opacity: 1;
	transform: translateY(0);
  }
}


/*========= ヘッダーナビゲーションのためのCSS ===============*/

/*==ヘッダーの形状*/
#header{
	height: 70px;
	width:100%;
	display: flex;
	justify-content: space-between;
	align-items: center;
	background:#333;
	color:#fff;
	text-align: center;
	padding: 20px;
}

/*.doneクラスがついたヘッダー*/
#header.dnone {
	opacity: 0;/*透過0にして非表示に*/
}

/*メニューボタンをクリックした際に付与されるpanelactiveクラスがついたら*/
#header.dnone.panelactive {
	opacity: 1;/*不透明にして出現*/
}


/*==ヘッダーのテキストナビゲーションの形状*/
#g-navi ul{
	list-style: none;
	display: flex;
	justify-content: center;
}

#g-navi ul li a{
	display: block;
	text-decoration: none;
	color: #666;
	padding:10px;
}

#g-navi ul li.current a,
#g-navi ul li a:hover{
	color:#fff;
}

/*.doneクラスがついたヘッダーのテキストナビゲーションの形状*/
#header.dnone #g-navi{
    /*固定位置にして最背面に*/
    position:fixed;
	top: 0;
    left: 0;
	z-index: -1;
    /*高さと幅*/
	width:100%;
	height: 100vh;
    /*天地中央＆テキスト中央揃え*/
	display: flex;
	justify-content: center;
	align-items: center;
	text-align: center;
    /*はじめは透過0に*/
    opacity: 0;
	transition: all 0.4s;
}

/*メニューボタンをクリックした際に付与されるpanelactiveクラスがついたナビゲーションの形状*/
#header.dnone.panelactive #g-navi{
	opacity: 1;/*不透明に*/
	z-index:3;/*最前面に*/
	background:#eee;
}

#header.dnone.panelactive #g-navi ul{
	display:block;/*flexの横並びをblockにして縦並びに*/
}

/* フッター全体の詳細 */
#footer {
    background:#333;
    width: 100%;
    height: 30%;
    position: block;
    top: 200%;
}

.footer_container {
    display: flex;        /* display=flexにすると本来Blockで縦に並ぶ要素が横並びになる */
}

/* 画像を中央ぞろえするためには画像のクラスではなく、画像の親divに対してtext-align: centerを設定する必要がある。 */
.bottom_image {
    text-align: center;
}

/* フッター内の画像の詳細 */
footer img {
    margin-top: 5%;
    width: 60%;
    height: 100%;
}

/* コピーライトの詳細 */
small{
    font-size: 1vw;
    color:rgb(212, 212, 212);
    display: block;
    text-align: left;
    padding:2em;
}

footer .left_contents {
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 40%;
}

/* 既存の要素の右に重ならないように配置する */
footer .bottom_text{
    color: rgb(212, 212, 212);
    width: 50%;
    /* 左端に配置 */
    text-align: left;
    margin-top: 2.8em;
    font-size: 2vw;
}

/*リストの形状*/
#header.dnone.panelactive #g-navi li a{
	color: #333;
	text-decoration: none;
	padding:10px;
	display: block;
	text-transform: uppercase;
	letter-spacing: 0.1em;
	font-weight: bold;
	transition:all 0.3s;
}

/* 以下は検証用のレイアウトのための CSS*/
section{
  padding:300px 0;
}



